# -*- fill-column: 80; org-confirm-babel-evaluate: nil -*-

#+TITLE:     Assignment 12, Data-Structures
#+AUTHOR:    Oleg Sivokon
#+EMAIL:     olegsivokon@gmail.com
#+DATE:      <2016-03-28 Mon>
#+DESCRIPTION: First assignment in the course Data-Structures
#+KEYWORDS: Data-Structures, Algorithms, Assignment
#+LANGUAGE: en
#+LaTeX_CLASS: article
#+LATEX_HEADER: \usepackage{commath}
#+LATEX_HEADER: \usepackage{pgf}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{shapes,backgrounds}
#+LATEX_HEADER: \usepackage{marginnote}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{enumerate}
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \setlength{\parskip}{16pt plus 2pt minus 2pt}
#+LATEX_HEADER: \renewcommand{\arraystretch}{1.6}

#+BEGIN_SRC emacs-lisp :exports none
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -f %f")
        org-latex-listings t
        org-src-fontify-natively t
        org-babel-latex-htlatex "htlatex")

  (defmacro by-backend (&rest body)
    `(progn
       (cl-case org-export-current-backend ,@body)))

  ;; (defmacro by-backend (&rest body)
  ;;   `(cl-case (when (boundp 'backend)
  ;;               (org-export-backend-name backend))
  ;;      ,@body))
#+END_SRC

#+RESULTS:
: by-backend

#+BEGIN_LATEX
\definecolor{codebg}{rgb}{0.96,0.99,0.8}
\definecolor{codestr}{rgb}{0.46,0.09,0.2}
\lstset{%
  backgroundcolor=\color{codebg},
  basicstyle=\ttfamily\scriptsize,
  breakatwhitespace=false,
  breaklines=false,
  captionpos=b,
  framexleftmargin=10pt,
  xleftmargin=10pt,
  framerule=0pt,
  frame=tb,
  keepspaces=true,
  keywordstyle=\color{blue},
  showspaces=false,
  showstringspaces=false,
  showtabs=false,
  stringstyle=\color{codestr},
  tabsize=2
}
\lstnewenvironment{maxima}{%
  \lstset{%
    backgroundcolor=\color{codebg},
    escapeinside={(*@}{@*)},
    aboveskip=20pt,
    captionpos=b,
    label=,
    caption=,
    showstringspaces=false,
    frame=single,
    framerule=0pt,
    basicstyle=\ttfamily\scriptsize,
    columns=fixed}}{}
}
\makeatletter
\newcommand{\verbatimfont}[1]{\renewcommand{\verbatim@font}{\ttfamily#1}}
\makeatother
\verbatimfont{\small}%
\clearpage
#+END_LATEX

* Problems

** Problem 1
   Find tight bounds on the given recurrences.  Assume $T(n)$ is constant for $n
   = 1$.

   #+HEADER: :exports results
   #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
   #+BEGIN_SRC latex
     \begin{align*}
       T(n) &= 8T\left(\frac{n}{2}\right) + n + n^3 \\
       T(n) &= kT\left(\frac{n}{2}\right) + (k - 2)n^3 \\
       &\textit{where}\; k \in \mathbb{Z}: k \geq 2 \\
       T(n) &= 2T\left(\frac{n}{4}\right) + \sqrt{n} \times \lg n \\
       T(n) &= T\left(n - 1\right) + n \lg n + n \\
       T(n) &= n^2 \sqrt{n} \times T\left(\sqrt{n}\right) + n^5 \lg^3 n + \lg^5 n
     \end{align*}
   #+END_SRC

*** Answer 1
    Using conclusion from master method theorem:

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= 8T\left(\frac{n}{2}\right) + n + n^3 \iff \\
        f(n) &= n + n^3 \\
        a &= 8 \\
        b &= 2 \\
        n^{\log_b a} = n^{\log_2 8} &= n^3 < n + n^3\;.
      \end{align*}
    #+END_SRC
    However, asymptotically, only the $n^3$ term matters, thus $T(n) =
    \Theta(n^3)$, viz. second case of master method.

*** Answer 2

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= kT\left(\frac{n}{2}\right) + (k - 2)n^3 \\
             &\textit{where}\; k \in \mathbb{Z}: k \geq 2 \\
             &= k\left(kT\left(\frac{n}{4}\right) + \frac{(k - 2)n^3}{2}\right) + (k - 2)n^3 \\
             &= k^2T\left(\frac{n}{4}\right) + \frac{(k + 2)(k - 2)n^3}{2} \\
             &= k^2\left(kT\left(\frac{n}{8}\right) + \frac{(k + 2)(k - 2)n^3}{8}\right) + \frac{(k + 2)(k - 2)n^3}{2} \\
             &= k^3T\left(\frac{n}{8}\right) + \frac{(k^2 + 4)(k + 2)(k - 2)n^3}{8} \\
             &= k^3T\left(\frac{n}{8}\right) + \frac{(k^2 + 4)(k^2 - 4)n^3}{8} \\
             &\dots \\
             &= k^iT\left(\frac{n}{2^i}\right) + \frac{(k^i - 2^i)n^3}{2^i}
      \end{align*}
    #+END_SRC

    The recursion ends when $i = \lg n$, and at this point the $T(1)$ vanishes,
    and we are left with:

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
         \frac{(k^i - 2^i)n^3}{2^i} &= \left(\frac{k}{2}\right)^in^3 - n^3 \\
         &\approx \left(\frac{k}{2}\right)^in^3 \\
         &= \left(\frac{k}{2}\right)^{\lg n}n^3 \\
         &\textit{Using}\; 2^{\lg n} = n \\
         &\approx n^4\;.
      \end{align*}
    #+END_SRC

    Thus $T(n) = O(n^4)$.

*** Answer 3
    Using conclusion from master method theorem:
    
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= 2T\left(\frac{n}{4}\right) + \sqrt{n} \lg n \iff \\
        f(n) &= \sqrt{n} \lg n \\
        a &= 2 \\
        b &= 4 \\
        n^{\log_b a} = n^{\log_4 2} &= \sqrt{n} < \sqrt{n} \lg n\;.
      \end{align*}
    #+END_SRC

    This is the first case of master method, i.e. most work is done at the root
    (at each step we look at two of the four sub-problems).  The amount of work
    done at each recursion step is $\sqrt{n}\times \lg n$ which is roughly the
    same as just $n$ since $\lg n = O(\sqrt{n})$.  Hence $T(n) = O(n)$.

*** Answer 4

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= T(n - 1) + n \lg n + n \\
             &= \sum_{i = 1}^n(i + i \lg i) \\
             &= \sum_{i = 1}^ni(1 + \lg i) \\
             &= \frac{n(n + 1)}{2} \times \sum_{i = 1}^n(1 + \lg i) \\
             &= \frac{n(n + 1)}{2} \times \left(n + \sum_{i = 1}^n \lg i \right) \\
             &= \frac{n(n + 1)(n + \lg n!)}{2} \\
             &\textit{using Stirling approximation} \\
             &\approx \frac{n(n + 1)(n + n \lg n - n)}{2} \\
             &= \frac{n^2 \lg n(n + 1)}{2} \\
             &\approx \frac{n^3 \lg n}{2} \;.
      \end{align*}
    #+END_SRC

    Since constant factors are of no interest to us, we conclude $T(n) = O(n^3
    \lg n)$.
    
*** Answer 5

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= n^2 \sqrt{n} T\left(\sqrt{n}\right) + n^5 \lg^3 n + \lg^5 n \\
             &= n^{\frac{5}{2}} T\left(n^{\frac{1}{2}}\right) + n^5 \lg^3 n + \lg^5 n \\
             &= n^{i\frac{5}{2}} T\left(n^{\frac{1}{i2}}\right) + \sum_{j=1}^i(n^5 \lg^3 n + \lg^5 n)^{\frac{1}{j}} \\
             &\textit{Recursion terminates when}\; n^{\frac{1}{i2}} = 1\;.
      \end{align*}
    #+END_SRC

** Problem 2
   Find upper and lower bounds on:

   #+HEADER: :exports results
   #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
   #+BEGIN_SRC latex
     \begin{align*}
       T(n) &= 2T(\frac{n}{2}) + n^3 \\
       T(n) &= T(\frac{9n}{10}) + n \\
       T(n) &= 16T(\frac{n}{4}) + n^2 \\
       T(n) &= 7T(\frac{n}{3}) + n^2 \\
       T(n) &= 7T(\frac{n}{2}) + n^2 \\
       T(n) &= 2T(\frac{n}{4}) + \sqrt{n} \\
       T(n) &= T(n - 1) + n \\
       T(n) &= T(\sqrt{n}) + 1
     \end{align*}
   #+END_SRC

*** Answer 6
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= 2T(\frac{n}{2}) + n^3 \\
        &\textit{Using master method} \\
        a &= 2 \\
        b &= 2 \\
        f(n) &= n^3 \\
        n^{\log_2 2} &= n < n^3 \\
        &\textit{Third case of master method, hence} \\
        T(n) &= \Theta(f(n)) = \Theta(n^3)
      \end{align*}
    #+END_SRC

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= T(\frac{9n}{10}) + n \\
        T(n) &= 9T(\frac{n}{10}) + n \\
        &\textit{Using master method} \\
        a &= 9 \\
        b &= 10 \\
        f(n) &= n \\
        n^{\log_9 10} &\approx n^{1.05} \approx n \\
        &\textit{Second case of master method, hence} \\
        T(n) &= \Theta(n^{1.05}\lg n) \approx \Theta(n\lg n)
      \end{align*}
    #+END_SRC

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= 16T(\frac{n}{4}) + n^2 \\
        &\textit{Using master method} \\
        a &= 16 \\
        b &= 4 \\
        f(n) &= n^2 \\
        n^{\log_4 16} &= n^2 = n^2 \\
        &\textit{Second case of master method, hence} \\
        T(n) &= \Theta(n^2\lg n)
      \end{align*}
    #+END_SRC

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= 7T(\frac{n}{3}) + n^2 \\
        &\textit{Using master method} \\
        a &= 7 \\
        b &= 3 \\
        f(n) &= n^2 \\
        n^{\log_3 7} &\approx n^{1.8} \approx n^2 \\
        &\textit{Second case of master method, hence} \\
        T(n) &= \Theta(n^2\lg n)
      \end{align*}
    #+END_SRC

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= 7T(\frac{n}{2}) + n^2 \\
        &\textit{Using master method} \\
        a &= 7 \\
        b &= 2 \\
        f(n) &= n^2 \\
        n^{\log_2 7} &\approx n^{2.8} > n^2 \\
        &\textit{First case of master method, hence} \\
        T(n) &= \Theta(n^{2.8}) \approx \Theta(n^3)
      \end{align*}
    #+END_SRC

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= 2T(\frac{n}{4}) + \sqrt{n} \\
        T(n) &= 2T(\frac{n}{4}) + n^{\frac{1}{2}} \\
        &\textit{Using master method} \\
        a &= 2 \\
        b &= 4 \\
        f(n) &= n^{\frac{1}{2}} \\
        n^{\log_4 2} &= n^{\frac{1}{2}} = n^{\frac{1}{2}} \\
        &\textit{Second case of master method, hence} \\
        T(n) &= \Theta(\sqrt{n} \lg n)
      \end{align*}
    #+END_SRC
    
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= T(n - 1) + n \\
        &\textit{Suppose} \\
        T(1) &= 1 \\
        &\textit{Then} \\
        T(n) &= T(1) + 2 + 3 + \dots + n = \frac{n(n + 1)}{2} \approx n^2 \\
        T(n) &= \Theta(n^2)
      \end{align*}
    #+END_SRC
    
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        T(n) &= T(\sqrt{n}) + 1 \\
        T(n) &= T(n^{\frac{1}{2}}) + 1 \\
             &= T(n^{\frac{1}{4}}) + 1 + 1 \\
             &= T(n^{\frac{1}{8}}) + 1 + 1 + 1 \\
             &= T(n^{\frac{1}{\lg i}}) + i \\
             &= \lg n \\
             &= \Theta(\lg n)
      \end{align*}
    #+END_SRC

** Problem 3
   Suggest a data-structure with the following properties:
   1. Populate in $O(n)$ time.
   2. Insert in $O(n \lg n)$ time.
   3. Extract minimal element in $O(\lg n)$ time.
   4. Extract median element in $O(\lg n)$ time.
   5. Extract maximal element in $O(\lg n)$ time.

*** Answer 6
    There is a simple, but impractical way of doing this---have four heaps:
    - $A$ is a =min-heap= containing elements greater than median.
    - $B$ is a =max-heap= containing elments smaller than median.
    - $C$ is a =max-heap= tracking the heap $A$.
    - $D$ is a =min-heap= tracking the heap $B$.

    Creation and insertion are essentially the same as they are in the regular
    =max-heap= and =mean-heap=.  Median element is either the root of $A$ or the
    root of $B$, depending on which heap has more elements.  Maximum element is
    the root of $C$ and minimal element is the root of $D$, so their extraction
    is just the glorified =extract-max= and =extract-min= correspondingly.

    Tracking is achieved using the following mechanism: Each node in each heap
    has an additional field that has a position of the tracked node in the other
    heap in it.  Once the position of the node is modified, in addition to
    =heapify-min= or =heapify-max=, the procedure also updates the index in the
    tracking node (this takes only constant time).

    Whenever a node is deleted, it also needs to be deleted from the tracking
    heap.  In this case, the rightmost element in the heap is placed in the cell
    previously occupied by the node being deleted.  Then =heapify-min= or
    =heapify-max= is performed, depending on the kind of heap it was.

    Note that this solution is impractical since it requires saving a lot of
    additional information, but if we were to relax the requirement of $O(n)$
    allowing $O(n \lg n)$ for population, then we could use something like
    order-statistic tree.

** Problem 4
   1. Given binary heap $A$ of size $n$ prove that =extract-max= requires
      roughly $2\lg n$ comparisons.
   2. Write an alternative =extract-max= which only uses $\lg n + \lg \lg n +
      O(1)$ comparisons.
   3. Improve the previous =extrac-max= s.t. its running time is $\lg n + \lg
      \lg \lg n + O(1)$ wrt. comparisons.
   4. Is it possible to improve this procedure further?  Is it worth it wrt. the
      amount of code that it requires?

*** Answer 7
    First, recall what =extract-max= looks like:

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{algorithm}
        \caption{Running time of extract-max}
        \begin{algorithmic}
          \Procedure {$\textit{extract-max}$}{$heap$}
          \State {$max \leftarrow $}{$heap_0$}
          \State \Call {$size \leftarrow \textit{size}$}{$heap$}
          \State {$last \leftarrow $}{$heap_{size - 1}$}
          \State {$heap_{size - 1} \leftarrow $}{$nil$}
          \State \Call {$\textit{heapify-max}$}{$heap, size - 1$}
          \State \Return {$max$}
          \EndProcedure

          \Procedure {$\textit{heapify-max}$}{$heap, child$}
          \State {$left \leftarrow $}{$child * 2 - 1$}
          \State {$right \leftarrow $}{$child * 2$}
          \State {$parent \leftarrow $}{$child$}
          \State \Call {$size \leftarrow \textit{size}$}{$heap$}
          \If {$left < size \land heap_{left} > heap_{parent}$} \Then
          \State {$parent \leftarrow $}{$left$}
          \EndIf
          \If {$right < size \land heap_{right} > heap_{parent}$} \Then
          \State {$parent \leftarrow $}{$right$}
          \EndIf
          \If {$parent \neq child$} \Then
          \State {$heap_{i},heap_{parent} \leftarrow $}{$heap_{parent},heap_{i}$}
          \State \Call {$\textit{heapify-max}$}{$heap, parent$}
          \EndIf
          \EndProcedure
        \end{algorithmic}
      \end{algorithm}
    #+END_SRC

    The comparisons all happen inside the =heapify-max=, notice that it is
    called recursively on the problem of size $n$, splitting it into two
    equally-sized portions, and only working on the selected subtree.  It will
    only look once at a node at the $h^s$ level $h$ being the heights of the
    heap.  At each such level it will do five comparisons: two to ensure that
    all reads fall within the valid range, two more to find the maximal element
    of the parent and its two sibling nodes, and the last one to figure out
    whether an additional =heapify-max= call is required.

    Thus, somewhat contrary to conjectured, the number of comparisons required
    is actually $5\lg n$, but only $2\lg n$ of them are between the members of
    the heap (the rest is borders checking).

*** Answer 8
    The idea is borrowed from Gonnet and Munro:

    #+BEGIN_QUOTE
    Observe that the elements on the path from any node to the root must be in
    sorted order.  Our idea is simply to insert the new element by performing
    the binary search on the path from location $n+1$ to 1.  As this path
    contains $\lceil \log(n + 1) \rceil$ old elements the algorithm will require
    $\lceil \log(\lceil 1 + \log(n + 1)\rceil)\rceil = \lceil \log(\log(2 + 1))
    \rceil$ comparisons in the worst case.  We note that the number of moves
    will be the same as those required in carefully coded standard algorithm.
    #+END_QUOTE

*** Answer 9
    Again, quoting Gonnet and Munro:

    #+BEGIN_QUOTE
    This bound can, however, be improved as follows.  For simplicity assume we
    are removing the maximum and simultaneously inserting a new element.
    #+END_QUOTE

    #+BEGIN_EXAMPLE
    Remove the maximum, creating a "hole" at the top of the heap.

    Find the path of the maximum sons down r levels to some location, say A(i)

    If New element > A(i) Then
      Perform perform a binary search with the new element along the path of
      length r
    Else
      Promote each element on the path to the location of its father and
      recursively apply the method starting at the location A(i).
    #+END_EXAMPLE

*** Answer 10
    The questions of ``practical usefulness'' are very subjective.  The answer
    will depend on multiple factors and the ability to predict the future in
    minor details.  However, it has been shown many times since Williams, Gonnet
    and Munro, Carlsson and many others who worked on optimizing priority
    queues, that binary heaps aren't the best choice of the data-structure for
    this purpose.  Typical requirement for a binary queue is that it perform an
    =insert= in constant time, this already disqualifies binary heaps, where one
    can only hope for amortized constant time.

    The reality of working with large datasets are such that continuous arrays
    are difficult to allocate and access.  Persistency becomes increasingly
    important and so does concurrency.  Binary heaps implemented as arrays don't
    fare very well in this emerging market, so the question of this specific
    optimization is rather pointless.
